pipeline {
  agent {
    kubernetes {
      yaml """
        apiVersion: v1
        kind: Pod
        spec:
          containers:
          - name: cloud-sdk
            image: google/cloud-sdk:latest
            command:
            - sleep
            args:
            - 9999999
            volumeMounts:
            - name: shared-storage
              mountPath: /mnt
            - name: google-cloud-key
              mountPath: /var/secrets/google
            env:
            - name: GOOGLE_APPLICATION_CREDENTIALS
              value: /var/secrets/google/[[[`cat ~/Files/devops/.sdkkey`]]]
            - name: GOOGLE_PROJECT
              value: [[[`cat ~/Files/devops/.sdkproj`]]]
          - name: gradle
            image: gradle
            command:
            - sleep
            args:
            - 99d
            volumeMounts:
            - name: shared-storage
              mountPath: /mnt
          - name: kaniko
            image: gcr.io/kaniko-project/executor:debug
            command:
            - sleep
            args:
            - 9999999
            volumeMounts:
            - name: shared-storage
              mountPath: /mnt
            - name: kaniko-secret
              mountPath: /kaniko/.docker
          restartPolicy: Never
          volumes:
          - name: shared-storage
            persistentVolumeClaim:
              claimName: jenkins-pv-claim
          - name: google-cloud-key
            secret:
              secretName: sdk-key
          - name: kaniko-secret
            secret:
                secretName: dockercred
                items:
                - key: .dockerconfigjson
                  path: config.json
      """
    }
  }
  stages {
    stage('Test stage 1: Wiil it blend?') {
      steps {
        sh ''' 
          # curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          # chmod +x ./kubectl
          # ./kubectl get ns
        '''
      }
    }
    stage('Smoke test') {
      steps {
        echo "AUTHOR NOTE: Required stage 1: Test the staging environment in my local kubernetes cluster."
        git 'https://github.com/juggergnat/Continuous-Delivery-with-Docker-and-Jenkins-Second-Edition.git'
        container('gradle') {
          sh '''
            cd Chapter08/sample1
            chmod +x ./gradlew
            ./gradlew smokeTest -Dcalculator.url=http://calculator-service.staging.svc.cluster.local:8080
          '''
        }
      }
    }
    stage('Deploy to GKE') {
      steps {
        echo "AUTHOR NOTE: Required stage 2: Start the calculator and hazelcast in GKE."
        container('cloud-sdk') {
          sh '''
            cd Week10/ex2
            echo 'Show namespaces in the staging environment' && kubectl get ns
            echo 'Show default gcloud project'                && gcloud config get project
            gcloud config set project $GOOGLE_PROJECT
            gcloud auth login --cred-file=$GOOGLE_APPLICATION_CREDENTIALS --no-launch-browser
            gcloud container clusters get-credentials hello-cluster --region us-central1 --project $GOOGLE_PROJECT
            GOOGLE_CLUSTER=`kubectl config get-clusters | grep hello-cluster`
            [[ ! -z "$GOOGLE_CLUSTER" ]] \
              && kubectl config use-context $GOOGLE_CLUSTER \
              || echo "Could not find target cluster and error handling at the level is out of scope."
            echo 'Show namespaces in the prod environment'    && kubectl get ns
            echo 'Show pods in the prod environment'.         && kubectl get ns
            GOOGLE_CLUSTER_NS=`kubectl get ns | grep devops-tools-production | awk '{print $1}'`
            [[ -z "$GOOGLE_CLUSTER_NS" ]] \
              && kubectl create namespace devops-tools-production \
              || echo "Target namespace exists $GOOGLE_CLUSTER_NS"
            kubectl apply -f hazelcast.yaml  -n devops-tools-production  && sleep 1
            kubectl apply -f calculator.yaml -n devops-tools-production  && sleep 1
            kubectl get pods -n devops-tools-production
            sleep 10
            kubectl get pods -n devops-tools-production
          '''
        }
      }
    }
  }
  post {
    always {
      echo 'FUN FACT: The always conditional in post always runs first before other conditionals.'
      echo 'Immona do my garbage collection here.'
    }
    success  { echo 'End: success!'  }
    failure  { echo 'End: failure!'  }
    unstable { echo 'End: unstable!' }
    changed  { echo 'End: changed!'  }
  }
}
