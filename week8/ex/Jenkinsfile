pipeline {
  agent {
    kubernetes {
      // From dlambrig/umlS24/blob/main/week8/Jenkins.declarative.
      yaml """
                apiVersion: v1
                kind: Pod
                spec:
                  containers:
                  - name: gradle
                    image: gradle
                    command:
                    - sleep
                    args:
                    - 99d
                    volumeMounts:
                    - name: shared-storage
                      mountPath: /mnt        
                  - name: kaniko
                    image: gcr.io/kaniko-project/executor:debug
                    command:
                    - sleep
                    args:
                    - 9999999
                    volumeMounts:
                    - name: shared-storage
                      mountPath: /mnt
                    - name: kaniko-secret
                      mountPath: /kaniko/.docker
                  restartPolicy: Never
                  volumes:
                  - name: shared-storage
                    persistentVolumeClaim:
                      claimName: jenkins-pv-claim
                  - name: kaniko-secret
                    secret:
                        secretName: dockercred
                        items:
                        - key: .dockerconfigjson
                          path: config.json
      """
    }
  }
  
  stages {

    stage('Checkout code and prepare environment.') {
      steps {
        echo "AUTHOR NOTE: Checking out juggergnat/Continuous-Delivery repo."
        git url: 'https://github.com/juggergnat/Continuous-Delivery-with-Docker-and-Jenkins-Second-Edition.git'
        sh """
          cd Chapter08/sample1
          chmod +x gradlew
        """
      }
    }

    // Not from assignment.
    stage('Run nothing here. There is no MASTER branch on juggergnat/UML-SP2024-MSIT.5330-031.') {
      when { branch 'master' }
      steps {
        echo 'AUTHOR NOTE: This should not run.'
      }
    }

    // From assignment: The CodeCoverage test should only run on the main branch.
    stage('Run pipeline against a gradle project - test MAIN - Code coverage.') {
      when { branch 'main' }
      steps {
        echo 'AUTHOR NOTE: This runs because branch main exists in juggergnat/UML-SP2024-MSIT.5330-031.'
        echo 'Code coverage test on main branch.'
        // sh """
        //   cd Chapter08/sample1;
        //   ./gradlew jacocoTestReport
        //   ./gradlew jacocoTestCoverageVerification
        // """
      }
    }
    // From assignment: All other tests should run in the feature and playground branches.
    stage('Run pipeline against a gradle project - test OTHER - Code check.') {
      when {
        anyOf {
          branch 'feature'
          branch 'playground'
        }
      }
      steps {
        echo 'AUTHOR NOTE: This runs because branch feature or playground exists in juggergnat/UML-SP2024-MSIT.5330-031.'
        echo 'Unit test and static code analysis on non-main branch.'
        // sh """
        //   cd Chapter08/sample1; 
        //   ./gradlew test
        //   ./gradlew checkstyleMain
        // """
      }
    }
  }

  post {
    always   {
      script {
        echo "Post always script: " + env.BRANCH_NAME
        if ( env.BRANCH_NAME == 'main' ) {
          // Code coverage test report.
          // publishHTML (target: [
          //   reportDir: 'Chapter08/sample1/build/reports/tests/test',
          //   reportFiles: 'index.html',
          //   reportName: "JaCoCo CC Report"
          // ])
        }
        if (env.BRANCH_NAME == 'feature' || env.BRANCH_NAME == 'playground') {
          // Unit test and static code analysis test report.
          // publishHTML (target: [
          //   reportDir: 'Chapter08/sample1/build/reports/checkstyle',
          //   reportFiles: 'main.html',
          //   reportName: "JaCoCo Checkstyle"
          // ])
        }
      }
      echo 'End: pipeline completed, yo!'
    }
    success  {
      script {
        echo "Post success script: " + env.BRANCH_NAME
        env.CONTAINER_NAME = ''
        if ( env.BRANCH_NAME == 'main' ) {        // Build repository/calculator:1.0.
          echo "Create container repository/calculator:1.0."
          env.CONTAINER_REPO = 'repository'
          env.CONTAINER_NAME = 'calculator:1.0'
        }
        if ( env.BRANCH_NAME == 'feature' ) {     // Build repository/calculator-feature:0.1.
          echo "Create container repository/calculator-feature:0.1."
          env.CONTAINER_REPO = 'repository'
          env.CONTAINER_NAME = 'calculator-feature:0.1'
        }
        if ( env.BRANCH_NAME == 'playground' ) {  // Build nothing. 
          echo "Create no container."
        }
        if ( "${CONTAINER_NAME}" ) {
          stages {
            stage('Will it blend?') {
              steps {
                echo 'Blend'
              }
            }
          }
        }
        else {
          echo 'Do not blend.'
        }
      }
      echo 'End: tests pass!'
/*
      stages {
        stage('Build a gradle project') {
            steps {
                git 'https://github.com/dlambrig/Continuous-Delivery-with-Docker-and-Jenkins-Second-Edition.git'
                container('gradle') {
                    sh '''
                    cd Chapter08/sample1
                    sed -i 's/minimum = 0.2/minimum = 0.1/' build.gradle
                    sed -i '/checkstyle {/,/}/d' build.gradle 
                    sed -i '/checkstyle/d' build.gradle 
                    cat build.gradle
                    chmod +x gradlew
                    ./gradlew build
                    mv ./build/libs/calculator-0.0.1-SNAPSHOT.jar /mnt
                    '''
                }
            }
        }
        
        stage('Build Java Image') {
            steps {
                container('kaniko') {
                    sh '''
                    echo 'FROM openjdk:8-jre' > Dockerfile
                    echo 'COPY ./calculator-0.0.1-SNAPSHOT.jar app.jar' >> Dockerfile
                    echo 'ENTRYPOINT ["java", "-jar", "app.jar"]' >> Dockerfile
                    mv /mnt/calculator-0.0.1-SNAPSHOT.jar .
                    /kaniko/executor --context `pwd` --destination dlambrig/hello-kaniko:1.0
                    '''
                }
            }
        }
      }
*/
    }
    failure  { echo 'End: tests fail!' }
    unstable { echo 'End: run is unstable!' }
    changed  { echo 'End: pipeline run changed!' }
  }
}
